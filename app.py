import streamlit as st
from transformers import AutoTokenizer, AutoModelForSequenceClassification
import torch
from openai import OpenAI
import os
from dotenv import load_dotenv
from supabase import create_client

load_dotenv()

# Initialize Supabase client
supabase_url = os.getenv("SUPABASE_URL")
supabase_key = os.getenv("SUPABASE_KEY")
supabase = create_client(supabase_url, supabase_key)

# Load PhoBERT
model_path = 'Suppleo/phobert-finetuned-jellypearl'
try:
    tokenizer = AutoTokenizer.from_pretrained(model_path)
    model = AutoModelForSequenceClassification.from_pretrained(model_path)
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model.to(device)
except Exception as e:
    st.error(f"L·ªói khi t·∫£i m√¥ h√¨nh: {e}")
    raise

# OpenRouter client
api_key = os.getenv("OPENROUTER_API_KEY")
if not api_key:
    st.error("Thi·∫øu OPENROUTER_API_KEY trong .env!")
    st.stop()
client = OpenAI(base_url="https://openrouter.ai/api/v1", api_key=api_key)

emotion_map_internal = {
    0: "Enjoyment", 1: "Sadness", 2: "Fear", 3: "Anger", 4: "Disgust", 5: "Surprise", 6: "Other"
}

emotion_map_display = {
    "Enjoyment": "Vui v·∫ª", "Sadness": "Bu·ªìn b√£", "Fear": "S·ª£ h√£i", "Anger": "T·ª©c gi·∫≠n",
    "Disgust": "Gh√™ t·ªüm", "Surprise": "Ng·∫°c nhi√™n", "Other": "B√¨nh th∆∞·ªùng"
}

# Reverse mapping for saving corrected emotion in English
display_to_english = {v: k for k, v in emotion_map_display.items()}

def predict_generate_and_get_meme(input_text):
    inputs = tokenizer(input_text, return_tensors="pt", padding=True, truncation=True, max_length=128)
    inputs = {k: v.to(device) for k, v in inputs.items()}
    with torch.no_grad():
        outputs = model(**inputs)
        pred = torch.argmax(outputs.logits, dim=-1).item()
    emotion_internal = emotion_map_internal[pred]
    emotion_display = emotion_map_display[emotion_internal]

    system_prompt = (
        "You are JellyPearl, an interdimensional therapist with a quirky, cosmic vibe and a taste for dark and sexual humor. "
        "Provide fun, insightful life advice in Vietnamese based on the user's predicted emotion, in exactly 3 sentences. "
        "Keep cursing rare, avoid politics, and make it witty and uplifting, even when diving into the absurd or naughty."
    )
    user_prompt = (
        f"React to '{input_text}' with the predicted emotion {emotion_display} as JellyPearl. "
        "Offer life advice in Vietnamese with a dark or sexual twist, minimal cursing, in 3 sentences. "
        "Make it fun and insightful to guide me!"
    )
    try:
        response = client.chat.completions.create(
            model="openrouter/quasar-alpha",
            messages=[{"role": "system", "content": system_prompt}, {"role": "user", "content": user_prompt}],
            max_tokens=300,
            temperature=0.9,
        )
        response_text = response.choices[0].message.content.strip()
    except Exception as e:
        st.error(f"L·ªói khi g·ªçi Quasar Alpha: {e}")
        response_text = "JellyPearl t·∫°m th·ªùi m·∫•t k·∫øt n·ªëi v≈© tr·ª•, th·ª≠ l·∫°i nh√©!"

    try:
        response = supabase.table("memes").select("meme_url").eq("emotion", emotion_internal).execute()
        memes = response.data
        meme_url = memes[0]['meme_url'] if memes else None
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y meme t·ª´ Supabase: {e}")
        meme_url = None

    return emotion_display, response_text, meme_url

def store_feedback(input_text, predicted_emotion, rating, corrected_emotion=None):
    try:
        corrected_eng = None
        if corrected_emotion:
            corrected_eng = display_to_english.get(corrected_emotion, corrected_emotion)
        data = {
            "input_text": input_text,
            "predicted_emotion": predicted_emotion,
            "rating": rating,
            "corrected_emotion": corrected_eng
        }
        supabase.table("feedback").insert(data).execute()
        return True
    except Exception as e:
        st.error(f"L·ªói khi l∆∞u ph·∫£n h·ªìi l√™n Supabase: {e}")
        return False

# --- Session State ---
st.session_state.setdefault('result', None)
st.session_state.setdefault('feedback_submitted', False)
st.session_state.setdefault('feedback_type', None)
st.session_state.setdefault('show_dislike_form', False)
st.session_state.setdefault('corrected_emotion', "")

# --- UI ---
st.title("Tr·ªã li·ªáu v·ªõi JellyPearl ü™ê")
st.markdown("""
B·∫°n ƒë√£ l·∫°c v√†o m·ªôt khe n·ª©t gi·ªØa c√°c chi·ªÅu kh√¥ng gian, ƒë·∫øn v·ªõi vƒÉn ph√≤ng k·ª≥ ·∫£o c·ªßa JellyPearl, m·ªôt nh√† tr·ªã li·ªáu l·∫•p l√°nh t·ª´ v≈© tr·ª• kh√°c.  
T·∫°i ƒë√¢y, JellyPearl nh√¨n th·∫•u t√¢m h·ªìn b·∫°n qua t·ª´ng l·ªùi n√≥i, ƒë∆∞a ra l·ªùi khuy√™n ƒë·∫ßy h√†i h∆∞·ªõc ƒëen t·ªëi v√† ch√∫t ngh·ªãch ng·ª£m, nh∆∞ng lu√¥n ·∫•m √°p v√† s√¢u s·∫Øc.  
H√£y chia s·∫ª suy nghƒ© c·ªßa b·∫°n, v√† ƒë·ªÉ JellyPearl d·∫´n d·∫Øt b·∫°n qua nh·ªØng m√™ cung c·∫£m x√∫c v·ªõi n·ª• c∆∞·ªùi t·ª´ c√µi h∆∞ kh√¥ng!
""")

st.write("### Nh·∫≠p suy nghƒ© c·ªßa b·∫°n ƒë·ªÉ nh·∫≠n l·ªùi khuy√™n t·ª´ JellyPearl!")
user_input = st.text_input("Suy nghƒ© c·ªßa b·∫°n:", "T√¥i c·∫£m th·∫•y l·∫°c l·ªëi trong ƒë·ªùi")

if st.button("Nh·∫≠n l·ªùi khuy√™n"):
    if user_input.strip():
        with st.spinner("JellyPearl ƒëang ph√¢n t√≠ch t√¢m h·ªìn b·∫°n..."):
            emotion, response, meme_url = predict_generate_and_get_meme(user_input)
            st.session_state.result = (emotion, response, meme_url)
            st.session_state.feedback_submitted = False
            st.session_state.feedback_type = None
            st.session_state.show_dislike_form = False
            st.session_state.corrected_emotion = ""
    else:
        st.error("H√£y nh·∫≠p g√¨ ƒë√≥ ƒëi, JellyPearl kh√¥ng ƒë·ªçc ƒë∆∞·ª£c √Ω nghƒ© ƒë√¢u!")

# --- Show result ---
if st.session_state.result:
    emotion, response, meme_url = st.session_state.result
    st.subheader("K·∫øt qu·∫£:")
    st.write(f"**C·∫£m x√∫c c·ªßa b·∫°n:** {emotion}")
    st.write(f"**L·ªùi khuy√™n t·ª´ JellyPearl:** {response}")
    if meme_url:
        st.image(meme_url, caption=f"Meme d√†nh cho b·∫°n h√¥m nay (C·∫£m x√∫c {emotion})", use_container_width=True)
    else:
        st.write("Kh√¥ng c√≥ meme n√†o ph√π h·ª£p.")

    # --- Feedback Buttons ---
    st.subheader("ƒê√°nh gi√° c·ªßa b·∫°n")
    if not st.session_state.feedback_submitted:
        col1, col2 = st.columns([1, 1])
        with col1:
            if st.button("Th√≠ch", key="like_btn"):
                if store_feedback(user_input, emotion, "like"):
                    st.session_state.feedback_submitted = True
                    st.session_state.feedback_type = "like"
        with col2:
            if st.button("Kh√¥ng th√≠ch", key="dislike_btn"):
                st.session_state.show_dislike_form = True

    # --- Show dislike form if triggered ---
    if st.session_state.show_dislike_form and not st.session_state.feedback_submitted:
        with st.form("dislike_form"):
            st.selectbox(
                "C·∫£m x√∫c ƒë√∫ng c·ªßa b·∫°n l√† g√¨?",
                [""] + list(emotion_map_display.values()),
                key="corrected_emotion"
            )
            if st.form_submit_button("G·ª≠i ph·∫£n h·ªìi kh√¥ng th√≠ch"):
                corrected = st.session_state.corrected_emotion
                if store_feedback(user_input, emotion, "dislike", corrected if corrected else None):
                    st.session_state.feedback_submitted = True
                    st.session_state.feedback_type = "dislike"

    # --- Feedback result ---
    elif st.session_state.feedback_submitted:
        if st.session_state.feedback_type == "like":
            st.success("C·∫£m ∆°n b·∫°n ƒë√£ th√≠ch l·ªùi khuy√™n c·ªßa JellyPearl!")
        elif st.session_state.feedback_type == "dislike":
            st.success("C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i ph·∫£n h·ªìi" + (" v√† s·ª≠a c·∫£m x√∫c!" if st.session_state.corrected_emotion else "!"))

st.write("Made with ‚ù§Ô∏è by Ngoc Thach - UMT Machine Learning Project")